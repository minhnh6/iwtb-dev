<?php
if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Project_model extends CI_Model {
    
    function __construct() {
        parent::__construct();
        $this->load->database();
    }
    
    public function add($dbData, $trades) {
        $this->db->trans_start();
        $this->db->insert("project", $dbData);
        $project_id = $this->db->insert_id();
        $projectTradeDbData = array();
        foreach($trades as $aTrade) {
            $projectTradeDbData[] = array("project_id" => $project_id, "trade_id" => $aTrade);
        }
        $this->db->insert_batch("project_trade", $projectTradeDbData);
        $this->db->trans_complete();
        return $this->db->trans_status();
    }

    public function addAndGetID($dbData, $trades) {
        $this->db->trans_start();
        $this->db->insert("project", $dbData);
        $project_id = $this->db->insert_id();
        $projectTradeDbData = array();
        foreach($trades as $aTrade) {
            $projectTradeDbData[] = array("project_id" => $project_id, "trade_id" => $aTrade);
        }
        $this->db->insert_batch("project_trade", $projectTradeDbData);
        $this->db->trans_complete();
        return $project_id;
    }
    
    public function getList($employer_id) {
        $this->db->select("*, (select count(project_bid.bid_id) from project_bid where project_bid.project_id = project.project_id and project_bid.discard_status = 0) as total_bid " )
                ->from("project")
                ->join("project_trade", "project.project_id = project_trade.project_id")
                ->where("project.user_id", $employer_id)
                ->where("project.project_status !=", "Unpaid")
                ->order_by("project.project_id", "DESC")
                ->group_by("project.project_id");
        $resultObj = $this->db->get();
        return $resultObj->result_array();
    }
    
    public function getDetails($project_id, $user_id) {
        $this->db->select("*")
                ->from("project")
                ->where("project.project_id", $project_id)
                ->where("project.user_id", $user_id);
        $resultObj = $this->db->get();
        return $resultObj->first_row("array");
    }

    public function getDetailsByAccessCode($access_code) {
        $this->db->select("*")
                ->from("project")
                ->where("access_code", $access_code);
        $resultObj = $this->db->get();
        return $resultObj->first_row("array");
    }
    
    public function getProjectBidders($project_id) {
        $this->db->select("*")
                ->from("project_bid")
                ->join("contractor", "project_bid.user_id = contractor.user_id")
                ->where("project_bid.project_id", $project_id)
                ->order_by("project_bid.bid_id", "ASC");
        $resultObj = $this->db->get();
        return $resultObj->result_array();
    }
    
    public function getProjectBiddersListEmail($project_id) {
        $this->db->select("project_bid.bid_id, project_bid.user_id, project_bid.bid_status, contractor.business_name, user.email_address, project_trade.*, project.name as projectName")
                ->from("project_bid")
                ->join("contractor", "contractor.user_id = project_bid.user_id")
                ->join("user","user.user_id = project_bid.user_id")
                ->join("project_trade", "project_bid.project_id = project_trade.project_id and project_bid.user_trade = project_trade.trade_id")
                ->join("project", "project.project_id = project_bid.project_id")
                ->where("project_bid.project_id", $project_id)
                ->where("project_bid.discard_status", 0)
                ->order_by("project_bid.bid_id", "ASC");
        $resultObj = $this->db->get();
        return $resultObj->result_array();
    }
    
    public function getAvailableLeadsForBidByTradeId($user_id, $trade_id,$state_id){
        $queryString = "
                        select * from (`project`)
                                join `project_trade` 
                                on `project`.`project_id` = `project_trade`.`project_id`
                                WHERE project.state_id = {$state_id} AND
                                `project_trade`.`trade_id` IN ( {$trade_id} )
                                and `project_trade`.`bidding_status` = 1 
                                and `project`.`project_status` = 'Open'
                                and not exists ( 
                                                 select project_bid.bid_id 
                                                 from project_bid 
                                                 where project_bid.project_id = project.project_id
                                                 and project_bid.user_id = {$user_id}                                        
                                                )
                        GROUP BY project.project_id
            ";
        $resultObj = $this->db->query($queryString);
        return $resultObj->result_array();
    }
    
    public function getUserBiddedList($user_id, $trade_id) {
        $this->db->select("*, project.user_id as project_owner_id")
                ->from("project")
                ->join("project_trade", "project.project_id = project_trade.project_id")
                ->join("project_bid", "project.project_id = project_bid.project_id")
                ->where("project_trade.trade_id IN ({$trade_id})")
                ->where("project_bid.user_id = {$user_id}")
                ->where("project_bid.bid_status = 'Open'")
                ->where("project_bid.discard_status = 0");
        $resultObj = $this->db->get();
        return $resultObj->result_array(); 
    }
    
    public function updateShareContactDetail($bid_id)
    {
        $data = array('is_contact_details_shared ' => 1);
        $this->db->where('bid_id ', $bid_id);
        $this->db->update('project_bid', $data);
        return $this->db->affected_rows() > 0;
    }
    /*
        0 - Open
        1 - Awarded
        2 - Accepted
        3 - Rejected 
        */
    
    public function updateAwardProject($bid_id)
    {
        $data = array('bid_status ' => 'Awarded');
        $this->db->where('bid_id ', $bid_id);
        $this->db->update('project_bid', $data);
        return $this->db->affected_rows() > 0;
    }
    
    public function getAwardedProjectsByContractorID($contractor_id)
    {
         $this->db->select("*, project.user_id as project_owner_id")
                ->from("project")                
                ->join("project_bid", "project.project_id = project_bid.project_id")               
                ->where("project_bid.user_id = {$contractor_id}")
                ->where("project_bid.discard_status = 0")
                ->where("project_bid.bid_status = 'Awarded'");
        $resultObj = $this->db->get();
        return $resultObj->result_array(); 
    }
    
    public function updateProjectDetail($project_id, $user_id, $update_data)
    {
        $data = $update_data;
        $this->db->where( array('project_id' => $project_id, "user_id" => $user_id) );
        $this->db->update('project', $data);
        return $this->db->affected_rows() > 0;
    }
     public function getProjectImgs($project_id)
    {   $this->db->select('*')->from('project_img');                    
        $this->db->where( array('project_id' => $project_id) );       
        $query = $this->db->get();
        if ($query->num_rows() > 0) {
              $row = $query->result_array();
              return $row;
        }
    }
    public function insertProjectImgs($insertdata)
    {   
        $rs = $this->db->insert('project_img', $insertdata);
        if ($rs) {
              return TRUE;
        } else {
              return FALSE;
        }
    }
     public function deleteProjectImgs($project_id)
    {   
        $query = "DELETE FROM project_img WHERE project_id = $project_id";
            $result = $this->db->query($query);
            if ($result) {
                  return TRUE;
            } else {
                  return FALSE;
            }
    }
    
}
?>