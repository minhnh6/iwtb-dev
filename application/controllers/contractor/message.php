<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Message extends AppController {    function __construct() {        parent::__construct();    }    public function manageAuthentication() {        $publicUri = array();        $currentMethod = $this->router->fetch_method();        if (!in_array($currentMethod, $publicUri)) {            $this->checkContractor();        }    }    public function index() {    }    public function showList($currentPage = 1) {        if(empty ($currentPage)) exit();                $this->viewData['pageTitle'] = "Contractor - Inbox";        $offset = (int)( ($currentPage - 1) * $this->inboxThreadPerPage );        $this->viewData['offset'] = $offset;        $this->viewData['inboxThreadPerPage'] = $this->inboxThreadPerPage;        $this->viewData['currentPage'] = $currentPage;                $this->viewData['threadList'] = $this->Messages_model->getContractorThreadList($this->getSession("user_id"), $offset, $this->inboxThreadPerPage);        $this->viewData['totalThread'] = count($this->Messages_model->getContractorThreadList($this->getSession("user_id")));        $this->viewData['totalUnredMessages'] = $this->Messages_model->getUnreadMessageTotal($this->getSession("user_id"));                //////pagination //        if($currentPage == 1) {            $this->viewData['prevLink'] = "";        }        else {            $this->viewData['prevLink'] = base_url() . "contractor/message/showList/" . ($currentPage-1);        }        if( ($offset+$this->inboxThreadPerPage) >= $this->viewData['totalThread'] )        {            $this->viewData['nextLink'] = "";        }        else {            $this->viewData['nextLink'] = base_url() . "contractor/message/showList/" . ($currentPage+1);        }        // end of pagination //                $this->showContractorView("message/show_list");        //        echo "<pre>";//            print_r($this->Messages_model->getContractorThreadList($this->getSession("user_id")));//        echo "</pre>";    }        public function showThread($threadId = 0) {        if(empty($threadId)) exit();        $threadId = (int)$threadId;                $this->Messages_model->updateUserMessageReadStatus($threadId, $this->getSession("user_id"));        $this->viewData['totalUnredMessages'] = $this->Messages_model->getUnreadMessageTotal($this->getSession("user_id"));        $this->viewData['theadDetails'] = $this->Messages_model->getContractorThreadDetails($threadId, $this->getSession("user_id"));                $this->showContractorView("message/thread_details");    }        public function getLatestMessageUpdate($threadId, $lastMessageShownId = 0) { // for ajax call //        if(empty($threadId)) exit();        $threadId = (int)$threadId;        $lastMessageShownId = (int)$lastMessageShownId;        $contractorId = (int)$this->getSession("user_id");                $theadDetails = $this->Messages_model->getContractorThreadDetails($threadId, $this->getSession("user_id"));        $threadMessageList = $this->Messages_model->getContractorThreadMessageList($threadId, $contractorId, $lastMessageShownId);                    $lastMessageIdShown = $lastMessageShownId;        $outputHtml = "";        foreach($threadMessageList as $aThreadMessage) {            $lastMessageIdShown = $aThreadMessage['id'];            $timelineClass = "";            $name = $this->getSession("business_name");            if($aThreadMessage['from'] == $theadDetails['user_id']) {                $timelineClass = "timeline-inverted";                $name = $theadDetails['first_name'] . " " . $theadDetails['surename'];            }            $messagingTime = date("d/m/Y h:i A", strtotime($aThreadMessage['sent_on']));            $outputHtml .= "                                <li class='". $timelineClass ."'>                                    <div class='timeline-panel'>                                        <div class='timeline-heading'>                                            <h4 class='timeline-title'><a>{$name}</a> <small class='text-muted'><i class='fa fa-clock-o'></i> <i>{$messagingTime}</i></small></h4>                                        </div>                                        <div class='timeline-body'>                                            <p>{$aThreadMessage['content']}</p>                                        </div>                                    </div>                                </li>                            ";        }        echo json_encode(                array(                    "lastMessageShownId" => $lastMessageIdShown,                    "messageListOutput" => $outputHtml                )             );    }        function addNewMessage($threadId, $employerUserId) {        if(empty($threadId)) exit();        $threadId = (int)$threadId;        $employerUserId = (int)$employerUserId;        $messageContent = $this->input->post("messageContent", true);        $contractorId = (int)$this->getSession("user_id");                // sending email about the messages ///        $threadDetails = $this->Messages_model->getContractorThreadDetails($threadId, $contractorId);        $emailTemplateVar = array();        $to = $threadDetails['email_address'];        $from = $this->getSession("email_address");        $subject = "{$threadDetails['projectName']} - {$this->getSession("business_name")} messaged you";                $emailTemplateVar['to'] = $to;        $emailTemplateVar['from'] = $this->getSession("business_name");        $emailTemplateVar['subject'] = $subject;        $emailTemplateVar['projectName'] = $threadDetails['projectName'];        $emailTemplateVar['messageText'] = $messageContent;        $emailTemplateVar['threadUrl'] = base_url() . "employer/message/showThread/{$threadId}";                $emailHtml = $this->load->view("email_template/new_message", $emailTemplateVar, true);                $this->sendEmail($to, $from, $subject, $emailHtml);        // ---------------------------------------------- //                        return $this->Messages_model->sendMessageByThreadId($threadId, $contractorId, $employerUserId, $messageContent);    }        function getlastSeenMessageId($lastSeenMessageId = 0) { // for ajax call //        if($lastSeenMessageId < 0 || ( $lastSeenMessageId == 0 )) exit();        $lastSeenMessageId = (int)$lastSeenMessageId;                        $newLastSeenMessageId = $this->Messages_model->getLastSeenMessageId($lastSeenMessageId, $this->getSession("user_id"));        if($newLastSeenMessageId == null) $newLastSeenMessageId = $lastSeenMessageId;        echo json_encode(                    array(                        "newLastSeenMessageId" => $newLastSeenMessageId                    )                );    }        function updateUnreadMessageStatus($threadId = 0) { // for ajax call //        if($threadId == 0) exit();        $threadId = (int)$threadId;        $this->Messages_model->updateUserMessageReadStatus($threadId, $this->getSession("user_id"));    }        function getNoOfUnreadMessages() { //for ajax call //        echo $this->Messages_model->getUnreadMessageTotal($this->getSession("user_id"));    }}